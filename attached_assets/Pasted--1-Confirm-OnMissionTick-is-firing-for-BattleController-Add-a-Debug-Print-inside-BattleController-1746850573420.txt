‚úÖ 1Ô∏è‚É£ Confirm OnMissionTick is firing for BattleController
Add a Debug.Print inside BattleController.OnMissionTick() method:

csharp
Copy
Edit
public override void OnMissionTick(float dt)
{
    Debug.Print("[HannibalAI] OnMissionTick fired.");
    base.OnMissionTick(dt);
}
We need to see this print at runtime in the log.
If this doesn‚Äôt fire ‚Üí investigate why BattleController isn‚Äôt properly attached as a mission behavior.

Also test adding:

csharp
Copy
Edit
Debug.Print($"[HannibalAI] Registered in MissionBehaviors: {Mission.Current.MissionBehaviors.Count}");
‚úÖ 2Ô∏è‚É£ Confirm AICommander.MakeDecision() is firing per tick
Add debug inside AICommander.MakeDecision:

csharp
Copy
Edit
Debug.Print("[HannibalAI] MakeDecision called for formation: " + (formation?.Index ?? -1));
We want to see per-formation decision logs when a battle is running.
If this doesn‚Äôt log ‚Üí investigate where MakeDecision() is being called or skipped.

‚úÖ 3Ô∏è‚É£ Validate ModConfig.Instance.AIControlsEnemies at runtime
Insert log in BattleController constructor:

csharp
Copy
Edit
Debug.Print($"[HannibalAI] AIControlsEnemies (at BattleController init): {ModConfig.Instance.AIControlsEnemies}");
If this prints false even after toggling UI ‚Üí the UI isn‚Äôt updating config or BattleController is constructed before UI writes config.

‚ö†Ô∏è ‚Üí If necessary, add a setter or event system for the UI to notify config after initialization.

‚úÖ 4Ô∏è‚É£ Confirm FallbackService.GetFallbackDecision and AIService.ProcessBattleSnapshot firing
Add debug inside these methods:

csharp
Copy
Edit
Debug.Print("[HannibalAI] Fallback decision retrieved.");
Debug.Print("[HannibalAI] Processing battle snapshot.");
We need to verify these paths are actively being hit per tick or at decision time.

‚úÖ 5Ô∏è‚É£ UI ‚Üí Confirm checkbox binding updates ModConfig
Validate that toggling ‚ÄúAI Controls Enemies‚Äù in the UI actually updates ModConfig.Instance.AIControlsEnemies.

‚Üí If it‚Äôs not updating the static instance, add an explicit setter like:

csharp
Copy
Edit
ModConfig.Instance.AIControlsEnemies = true; // or false depending on checkbox
Make sure the data binding between the checkbox widget ‚Üí ViewModel ‚Üí ModConfig is two-way.

üèóÔ∏è Optional Quick Test (Temporary):
To force logic validation, add this temporarily in BattleController.OnMissionTick:

csharp
Copy
Edit
ExecuteAIDecision(new AIDecision { Command = new HoldCommand { Formation = 0, HoldPosition = Vec3.Zero } });
If we see this log or action happen ‚Üí confirms method path works ‚Üí issue is earlier in logic flow.