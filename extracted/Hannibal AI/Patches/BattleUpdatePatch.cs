using HarmonyLib;
using TaleWorlds.MountAndBlade;
using HannibalAI.Services;
using HannibalAI.Battle;
using System;

namespace HannibalAI.Patches
{
    [HarmonyPatch(typeof(Mission), "OnTick")]
    public class BattleUpdatePatch
    {
        private static bool _battleStarted = false;
        private static BattleController _battleController;

        static void Postfix(Mission __instance)
        {
            if (__instance == null || __instance.Teams == null || __instance.Teams.Count < 2)
                return;

            if (!_battleStarted)
            {
                var playerTeam = __instance.PlayerTeam;
                var enemyTeam = __instance.PlayerEnemyTeam;

                if (playerTeam != null && enemyTeam != null)
                {
                    var commander = new AICommander(playerTeam);
                    var fallbackService = new FallbackService();
                    _battleController = new BattleController(commander, fallbackService);

                    _battleStarted = true;
                }
            }

            if (_battleStarted && _battleController != null)
            {
                try
                {
                    // Here you would hook the logic to evaluate and execute decisions every frame
                    // Example: _battleController.ExecuteAIDecision(AIDecision generated by your system);
                }
                catch (Exception ex)
                {
                    Utils.Logger.LogError($"Error during BattleUpdatePatch execution: {ex.Message}");
                }
            }
        }
    }
}
